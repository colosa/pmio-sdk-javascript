/**
 * ProcessMaker API
 * This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine api that is designed to be used as a microservice to support enterprise cloud applications.  The current Alpha 1.0 version supports most of the descriptive class of the BPMN 2.0 specification.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@processmaker.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorArray', 'model/ClientItem', 'model/ClientCreateItem', 'model/EventItem', 'model/EventCreateItem', 'model/EventConnector1', 'model/EventConnectorCreateItem', 'model/FlowCreateItem', 'model/FlowItem', 'model/GatewayItem', 'model/GatewayCreateItem', 'model/GroupCreateItem', 'model/GroupItem', 'model/ResultSuccess', 'model/TaskAddGroupsItem', 'model/InputOutputCreateItem', 'model/InputOutputItem', 'model/InstanceCreateItem', 'model/InstanceItem', 'model/ProcessItem', 'model/ProcessCreateItem', 'model/TaskItem', 'model/TaskCreateItem', 'model/TaskConnectorCreateItem', 'model/TaskConnector1', 'model/UserItem', 'model/UserCreateItem', 'model/GroupAddUsersItem', 'model/DataModelItem1', 'model/TriggerEventCreateItem', 'model/ClientCollection', 'model/EventConnectorsCollection', 'model/EventCollection', 'model/FlowCollection', 'model/GatewayCollection', 'model/GroupCollection', 'model/InputOutputCollection', 'model/InstanceCollection', 'model/ProcessCollection', 'model/TaskConnectorsCollection', 'model/InlineResponse200', 'model/TaskInstanceCollection', 'model/TaskCollection', 'model/UserCollection', 'model/BpmnImportItem', 'model/ProcessCollection1', 'model/TaskRemoveGroupsItem', 'model/GroupRemoveUsersItem', 'model/TaskSyncGroupsItem', 'model/GroupSyncUsersItem', 'model/ClientUpdateItem', 'model/EventUpdateItem', 'model/EventConnectorUpdateItem', 'model/FlowUpdateItem', 'model/GatewayUpdateItem', 'model/GroupUpdateItem', 'model/InputOutputUpdateItem', 'model/InstanceUpdateItem', 'model/ProcessUpdateItem', 'model/TaskUpdateItem', 'model/TaskConnectorUpdateItem', 'model/TaskInstanceUpdateItem', 'model/UserUpdateItem'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorArray'), require('../model/ClientItem'), require('../model/ClientCreateItem'), require('../model/EventItem'), require('../model/EventCreateItem'), require('../model/EventConnector1'), require('../model/EventConnectorCreateItem'), require('../model/FlowCreateItem'), require('../model/FlowItem'), require('../model/GatewayItem'), require('../model/GatewayCreateItem'), require('../model/GroupCreateItem'), require('../model/GroupItem'), require('../model/ResultSuccess'), require('../model/TaskAddGroupsItem'), require('../model/InputOutputCreateItem'), require('../model/InputOutputItem'), require('../model/InstanceCreateItem'), require('../model/InstanceItem'), require('../model/ProcessItem'), require('../model/ProcessCreateItem'), require('../model/TaskItem'), require('../model/TaskCreateItem'), require('../model/TaskConnectorCreateItem'), require('../model/TaskConnector1'), require('../model/UserItem'), require('../model/UserCreateItem'), require('../model/GroupAddUsersItem'), require('../model/DataModelItem1'), require('../model/TriggerEventCreateItem'), require('../model/ClientCollection'), require('../model/EventConnectorsCollection'), require('../model/EventCollection'), require('../model/FlowCollection'), require('../model/GatewayCollection'), require('../model/GroupCollection'), require('../model/InputOutputCollection'), require('../model/InstanceCollection'), require('../model/ProcessCollection'), require('../model/TaskConnectorsCollection'), require('../model/InlineResponse200'), require('../model/TaskInstanceCollection'), require('../model/TaskCollection'), require('../model/UserCollection'), require('../model/BpmnImportItem'), require('../model/ProcessCollection1'), require('../model/TaskRemoveGroupsItem'), require('../model/GroupRemoveUsersItem'), require('../model/TaskSyncGroupsItem'), require('../model/GroupSyncUsersItem'), require('../model/ClientUpdateItem'), require('../model/EventUpdateItem'), require('../model/EventConnectorUpdateItem'), require('../model/FlowUpdateItem'), require('../model/GatewayUpdateItem'), require('../model/GroupUpdateItem'), require('../model/InputOutputUpdateItem'), require('../model/InstanceUpdateItem'), require('../model/ProcessUpdateItem'), require('../model/TaskUpdateItem'), require('../model/TaskConnectorUpdateItem'), require('../model/TaskInstanceUpdateItem'), require('../model/UserUpdateItem'));
  } else {
    // Browser globals (root is window)
    if (!root.ProcessMakerApi) {
      root.ProcessMakerApi = {};
    }
    root.ProcessMakerApi.ProcessmakerApi = factory(root.ProcessMakerApi.ApiClient, root.ProcessMakerApi.ErrorArray, root.ProcessMakerApi.ClientItem, root.ProcessMakerApi.ClientCreateItem, root.ProcessMakerApi.EventItem, root.ProcessMakerApi.EventCreateItem, root.ProcessMakerApi.EventConnector1, root.ProcessMakerApi.EventConnectorCreateItem, root.ProcessMakerApi.FlowCreateItem, root.ProcessMakerApi.FlowItem, root.ProcessMakerApi.GatewayItem, root.ProcessMakerApi.GatewayCreateItem, root.ProcessMakerApi.GroupCreateItem, root.ProcessMakerApi.GroupItem, root.ProcessMakerApi.ResultSuccess, root.ProcessMakerApi.TaskAddGroupsItem, root.ProcessMakerApi.InputOutputCreateItem, root.ProcessMakerApi.InputOutputItem, root.ProcessMakerApi.InstanceCreateItem, root.ProcessMakerApi.InstanceItem, root.ProcessMakerApi.ProcessItem, root.ProcessMakerApi.ProcessCreateItem, root.ProcessMakerApi.TaskItem, root.ProcessMakerApi.TaskCreateItem, root.ProcessMakerApi.TaskConnectorCreateItem, root.ProcessMakerApi.TaskConnector1, root.ProcessMakerApi.UserItem, root.ProcessMakerApi.UserCreateItem, root.ProcessMakerApi.GroupAddUsersItem, root.ProcessMakerApi.DataModelItem1, root.ProcessMakerApi.TriggerEventCreateItem, root.ProcessMakerApi.ClientCollection, root.ProcessMakerApi.EventConnectorsCollection, root.ProcessMakerApi.EventCollection, root.ProcessMakerApi.FlowCollection, root.ProcessMakerApi.GatewayCollection, root.ProcessMakerApi.GroupCollection, root.ProcessMakerApi.InputOutputCollection, root.ProcessMakerApi.InstanceCollection, root.ProcessMakerApi.ProcessCollection, root.ProcessMakerApi.TaskConnectorsCollection, root.ProcessMakerApi.InlineResponse200, root.ProcessMakerApi.TaskInstanceCollection, root.ProcessMakerApi.TaskCollection, root.ProcessMakerApi.UserCollection, root.ProcessMakerApi.BpmnImportItem, root.ProcessMakerApi.ProcessCollection1, root.ProcessMakerApi.TaskRemoveGroupsItem, root.ProcessMakerApi.GroupRemoveUsersItem, root.ProcessMakerApi.TaskSyncGroupsItem, root.ProcessMakerApi.GroupSyncUsersItem, root.ProcessMakerApi.ClientUpdateItem, root.ProcessMakerApi.EventUpdateItem, root.ProcessMakerApi.EventConnectorUpdateItem, root.ProcessMakerApi.FlowUpdateItem, root.ProcessMakerApi.GatewayUpdateItem, root.ProcessMakerApi.GroupUpdateItem, root.ProcessMakerApi.InputOutputUpdateItem, root.ProcessMakerApi.InstanceUpdateItem, root.ProcessMakerApi.ProcessUpdateItem, root.ProcessMakerApi.TaskUpdateItem, root.ProcessMakerApi.TaskConnectorUpdateItem, root.ProcessMakerApi.TaskInstanceUpdateItem, root.ProcessMakerApi.UserUpdateItem);
  }
}(this, function(ApiClient, ErrorArray, ClientItem, ClientCreateItem, EventItem, EventCreateItem, EventConnector1, EventConnectorCreateItem, FlowCreateItem, FlowItem, GatewayItem, GatewayCreateItem, GroupCreateItem, GroupItem, ResultSuccess, TaskAddGroupsItem, InputOutputCreateItem, InputOutputItem, InstanceCreateItem, InstanceItem, ProcessItem, ProcessCreateItem, TaskItem, TaskCreateItem, TaskConnectorCreateItem, TaskConnector1, UserItem, UserCreateItem, GroupAddUsersItem, DataModelItem1, TriggerEventCreateItem, ClientCollection, EventConnectorsCollection, EventCollection, FlowCollection, GatewayCollection, GroupCollection, InputOutputCollection, InstanceCollection, ProcessCollection, TaskConnectorsCollection, InlineResponse200, TaskInstanceCollection, TaskCollection, UserCollection, BpmnImportItem, ProcessCollection1, TaskRemoveGroupsItem, GroupRemoveUsersItem, TaskSyncGroupsItem, GroupSyncUsersItem, ClientUpdateItem, EventUpdateItem, EventConnectorUpdateItem, FlowUpdateItem, GatewayUpdateItem, GroupUpdateItem, InputOutputUpdateItem, InstanceUpdateItem, ProcessUpdateItem, TaskUpdateItem, TaskConnectorUpdateItem, TaskInstanceUpdateItem, UserUpdateItem) {
  'use strict';

  /**
   * Processmaker service.
   * @module api/ProcessmakerApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ProcessmakerApi. 
   * @alias module:api/ProcessmakerApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addClient operation.
     * @callback module:api/ProcessmakerApi~addClientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method creates a new Oauth client for the user
     * @param {String} userId ID of the user related to the Oauth client
     * @param {module:model/ClientCreateItem} clientCreateItem JSON API with the Oauth Client object to add
     * @param {module:api/ProcessmakerApi~addClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientItem}
     */
    this.addClient = function(userId, clientCreateItem, callback) {
      var postBody = clientCreateItem;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling addClient";
      }

      // verify the required parameter 'clientCreateItem' is set
      if (clientCreateItem == undefined || clientCreateItem == null) {
        throw "Missing the required parameter 'clientCreateItem' when calling addClient";
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ClientItem;

      return this.apiClient.callApi(
        '/users/{user_id}/clients', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addEvent operation.
     * @callback module:api/ProcessmakerApi~addEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method creates the new event.
     * @param {String} processId ID of the process related to the event
     * @param {module:model/EventCreateItem} eventCreateItem JSON API response with the Event object to add
     * @param {module:api/ProcessmakerApi~addEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventItem}
     */
    this.addEvent = function(processId, eventCreateItem, callback) {
      var postBody = eventCreateItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling addEvent";
      }

      // verify the required parameter 'eventCreateItem' is set
      if (eventCreateItem == undefined || eventCreateItem == null) {
        throw "Missing the required parameter 'eventCreateItem' when calling addEvent";
      }


      var pathParams = {
        'process_id': processId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = EventItem;

      return this.apiClient.callApi(
        '/processes/{process_id}/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addEventConnector operation.
     * @callback module:api/ProcessmakerApi~addEventConnectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventConnector1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method is intended for creating a new Event connector.
     * @param {String} processId ID of Process to fetch
     * @param {String} eventId ID of Event to fetch
     * @param {module:model/EventConnectorCreateItem} eventConnectorCreateItem JSON API with the EventConnector object to add
     * @param {module:api/ProcessmakerApi~addEventConnectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventConnector1}
     */
    this.addEventConnector = function(processId, eventId, eventConnectorCreateItem, callback) {
      var postBody = eventConnectorCreateItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling addEventConnector";
      }

      // verify the required parameter 'eventId' is set
      if (eventId == undefined || eventId == null) {
        throw "Missing the required parameter 'eventId' when calling addEventConnector";
      }

      // verify the required parameter 'eventConnectorCreateItem' is set
      if (eventConnectorCreateItem == undefined || eventConnectorCreateItem == null) {
        throw "Missing the required parameter 'eventConnectorCreateItem' when calling addEventConnector";
      }


      var pathParams = {
        'process_id': processId,
        'event_id': eventId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = EventConnector1;

      return this.apiClient.callApi(
        '/processes/{process_id}/events/{event_id}/connectors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addFlow operation.
     * @callback module:api/ProcessmakerApi~addFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlowItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method creates a new Sequence flow
     * @param {String} processId ID of the process related to the flow
     * @param {module:model/FlowCreateItem} flowCreateItem JSON API response with the Flow object to add
     * @param {module:api/ProcessmakerApi~addFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlowItem}
     */
    this.addFlow = function(processId, flowCreateItem, callback) {
      var postBody = flowCreateItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling addFlow";
      }

      // verify the required parameter 'flowCreateItem' is set
      if (flowCreateItem == undefined || flowCreateItem == null) {
        throw "Missing the required parameter 'flowCreateItem' when calling addFlow";
      }


      var pathParams = {
        'process_id': processId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = FlowItem;

      return this.apiClient.callApi(
        '/processes/{process_id}/flows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addGateway operation.
     * @callback module:api/ProcessmakerApi~addGatewayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GatewayItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method creates a new gateway.
     * @param {String} processId ID of the process related to the gateway
     * @param {module:model/GatewayCreateItem} gatewayCreateItem JSON API response with the gateway object to add
     * @param {module:api/ProcessmakerApi~addGatewayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GatewayItem}
     */
    this.addGateway = function(processId, gatewayCreateItem, callback) {
      var postBody = gatewayCreateItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling addGateway";
      }

      // verify the required parameter 'gatewayCreateItem' is set
      if (gatewayCreateItem == undefined || gatewayCreateItem == null) {
        throw "Missing the required parameter 'gatewayCreateItem' when calling addGateway";
      }


      var pathParams = {
        'process_id': processId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = GatewayItem;

      return this.apiClient.callApi(
        '/processes/{process_id}/gateways', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addGroup operation.
     * @callback module:api/ProcessmakerApi~addGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method creates a new group.
     * @param {module:model/GroupCreateItem} groupCreateItem JSON API with the Group object to add
     * @param {module:api/ProcessmakerApi~addGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupItem}
     */
    this.addGroup = function(groupCreateItem, callback) {
      var postBody = groupCreateItem;

      // verify the required parameter 'groupCreateItem' is set
      if (groupCreateItem == undefined || groupCreateItem == null) {
        throw "Missing the required parameter 'groupCreateItem' when calling addGroup";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = GroupItem;

      return this.apiClient.callApi(
        '/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addGroupsToTask operation.
     * @callback module:api/ProcessmakerApi~addGroupsToTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method assigns group(s) to the choosen task
     * @param {String} processId Process ID
     * @param {String} taskId ID of task to be modified
     * @param {module:model/TaskAddGroupsItem} taskAddGroupsItem JSON API with Groups ID&#39;s to add
     * @param {module:api/ProcessmakerApi~addGroupsToTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultSuccess}
     */
    this.addGroupsToTask = function(processId, taskId, taskAddGroupsItem, callback) {
      var postBody = taskAddGroupsItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling addGroupsToTask";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling addGroupsToTask";
      }

      // verify the required parameter 'taskAddGroupsItem' is set
      if (taskAddGroupsItem == undefined || taskAddGroupsItem == null) {
        throw "Missing the required parameter 'taskAddGroupsItem' when calling addGroupsToTask";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ResultSuccess;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}/groups', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addInputOutput operation.
     * @callback module:api/ProcessmakerApi~addInputOutputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InputOutputItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method creates a new Input/Output object
     * @param {String} processId Process ID related to Input/Output object
     * @param {String} taskId Task instance ID related to Input/Output object
     * @param {module:model/InputOutputCreateItem} inputOutputCreateItem Create and add a new Input/Output object with JSON API
     * @param {module:api/ProcessmakerApi~addInputOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InputOutputItem}
     */
    this.addInputOutput = function(processId, taskId, inputOutputCreateItem, callback) {
      var postBody = inputOutputCreateItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling addInputOutput";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling addInputOutput";
      }

      // verify the required parameter 'inputOutputCreateItem' is set
      if (inputOutputCreateItem == undefined || inputOutputCreateItem == null) {
        throw "Missing the required parameter 'inputOutputCreateItem' when calling addInputOutput";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = InputOutputItem;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}/inputoutput', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addInstance operation.
     * @callback module:api/ProcessmakerApi~addInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method creates a new instance.
     * @param {String} processId Process ID related to the nstance
     * @param {module:model/InstanceCreateItem} instanceCreateItem JSON API response with the Instance object to add
     * @param {module:api/ProcessmakerApi~addInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceItem}
     */
    this.addInstance = function(processId, instanceCreateItem, callback) {
      var postBody = instanceCreateItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling addInstance";
      }

      // verify the required parameter 'instanceCreateItem' is set
      if (instanceCreateItem == undefined || instanceCreateItem == null) {
        throw "Missing the required parameter 'instanceCreateItem' when calling addInstance";
      }


      var pathParams = {
        'process_id': processId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = InstanceItem;

      return this.apiClient.callApi(
        '/processes/{process_id}/instances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addProcess operation.
     * @callback module:api/ProcessmakerApi~addProcessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method creates a new process
     * @param {module:model/ProcessCreateItem} processCreateItem JSON API response with the Process object to add
     * @param {module:api/ProcessmakerApi~addProcessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessItem}
     */
    this.addProcess = function(processCreateItem, callback) {
      var postBody = processCreateItem;

      // verify the required parameter 'processCreateItem' is set
      if (processCreateItem == undefined || processCreateItem == null) {
        throw "Missing the required parameter 'processCreateItem' when calling addProcess";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ProcessItem;

      return this.apiClient.callApi(
        '/processes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addTask operation.
     * @callback module:api/ProcessmakerApi~addTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method creates a new task.
     * @param {String} processId Process ID related to the task
     * @param {module:model/TaskCreateItem} taskCreateItem JSON API with the Task object to add
     * @param {module:api/ProcessmakerApi~addTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskItem}
     */
    this.addTask = function(processId, taskCreateItem, callback) {
      var postBody = taskCreateItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling addTask";
      }

      // verify the required parameter 'taskCreateItem' is set
      if (taskCreateItem == undefined || taskCreateItem == null) {
        throw "Missing the required parameter 'taskCreateItem' when calling addTask";
      }


      var pathParams = {
        'process_id': processId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = TaskItem;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addTaskConnector operation.
     * @callback module:api/ProcessmakerApi~addTaskConnectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskConnector1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method is intended for creating a new task connector.
     * @param {String} processId ID of Process to fetch
     * @param {String} taskId ID of Task to fetch
     * @param {module:model/TaskConnectorCreateItem} taskConnectorCreateItem JSON API with the TaskConnector object to add
     * @param {module:api/ProcessmakerApi~addTaskConnectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskConnector1}
     */
    this.addTaskConnector = function(processId, taskId, taskConnectorCreateItem, callback) {
      var postBody = taskConnectorCreateItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling addTaskConnector";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling addTaskConnector";
      }

      // verify the required parameter 'taskConnectorCreateItem' is set
      if (taskConnectorCreateItem == undefined || taskConnectorCreateItem == null) {
        throw "Missing the required parameter 'taskConnectorCreateItem' when calling addTaskConnector";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = TaskConnector1;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}/connectors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addUser operation.
     * @callback module:api/ProcessmakerApi~addUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method creates a new user in the system.
     * @param {module:model/UserCreateItem} userCreateItem JSON API with the User object to add
     * @param {module:api/ProcessmakerApi~addUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserItem}
     */
    this.addUser = function(userCreateItem, callback) {
      var postBody = userCreateItem;

      // verify the required parameter 'userCreateItem' is set
      if (userCreateItem == undefined || userCreateItem == null) {
        throw "Missing the required parameter 'userCreateItem' when calling addUser";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = UserItem;

      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addUsersToGroup operation.
     * @callback module:api/ProcessmakerApi~addUsersToGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method adds one or more new users to a group.
     * @param {String} id ID of group to be modified
     * @param {module:model/GroupAddUsersItem} groupAddUsersItem JSON API response with array of users ID&#39;s
     * @param {module:api/ProcessmakerApi~addUsersToGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultSuccess}
     */
    this.addUsersToGroup = function(id, groupAddUsersItem, callback) {
      var postBody = groupAddUsersItem;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling addUsersToGroup";
      }

      // verify the required parameter 'groupAddUsersItem' is set
      if (groupAddUsersItem == undefined || groupAddUsersItem == null) {
        throw "Missing the required parameter 'groupAddUsersItem' when calling addUsersToGroup";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ResultSuccess;

      return this.apiClient.callApi(
        '/groups/{id}/users', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteClient operation.
     * @callback module:api/ProcessmakerApi~deleteClientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method deletes an Oauth client using the client and user IDs.
     * @param {String} userId User ID
     * @param {String} clientId ID of client to delete
     * @param {module:api/ProcessmakerApi~deleteClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultSuccess}
     */
    this.deleteClient = function(userId, clientId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling deleteClient";
      }

      // verify the required parameter 'clientId' is set
      if (clientId == undefined || clientId == null) {
        throw "Missing the required parameter 'clientId' when calling deleteClient";
      }


      var pathParams = {
        'user_id': userId,
        'client_id': clientId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ResultSuccess;

      return this.apiClient.callApi(
        '/users/{user_id}/clients/{client_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEvent operation.
     * @callback module:api/ProcessmakerApi~deleteEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method deletes an event using the event ID and process ID
     * @param {String} processId Process ID
     * @param {String} eventId ID of event to delete
     * @param {module:api/ProcessmakerApi~deleteEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultSuccess}
     */
    this.deleteEvent = function(processId, eventId, callback) {
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling deleteEvent";
      }

      // verify the required parameter 'eventId' is set
      if (eventId == undefined || eventId == null) {
        throw "Missing the required parameter 'eventId' when calling deleteEvent";
      }


      var pathParams = {
        'process_id': processId,
        'event_id': eventId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ResultSuccess;

      return this.apiClient.callApi(
        '/processes/{process_id}/events/{event_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEventConnector operation.
     * @callback module:api/ProcessmakerApi~deleteEventConnectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method is intended for deleting a single Event connector based on Event ID, Process ID and Connector ID.
     * @param {String} processId ID of of Process item
     * @param {String} eventId ID of item to fetch
     * @param {String} connectorId ID of EventConnector to fetch
     * @param {module:api/ProcessmakerApi~deleteEventConnectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultSuccess}
     */
    this.deleteEventConnector = function(processId, eventId, connectorId, callback) {
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling deleteEventConnector";
      }

      // verify the required parameter 'eventId' is set
      if (eventId == undefined || eventId == null) {
        throw "Missing the required parameter 'eventId' when calling deleteEventConnector";
      }

      // verify the required parameter 'connectorId' is set
      if (connectorId == undefined || connectorId == null) {
        throw "Missing the required parameter 'connectorId' when calling deleteEventConnector";
      }


      var pathParams = {
        'process_id': processId,
        'event_id': eventId,
        'connector_id': connectorId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ResultSuccess;

      return this.apiClient.callApi(
        '/processes/{process_id}/events/{event_id}/connectors/{connector_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFlow operation.
     * @callback module:api/ProcessmakerApi~deleteFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method deletes a sequence flow using the flow ID and process ID.
     * @param {String} processId Process ID
     * @param {String} flowId ID of flow to delete
     * @param {module:api/ProcessmakerApi~deleteFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultSuccess}
     */
    this.deleteFlow = function(processId, flowId, callback) {
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling deleteFlow";
      }

      // verify the required parameter 'flowId' is set
      if (flowId == undefined || flowId == null) {
        throw "Missing the required parameter 'flowId' when calling deleteFlow";
      }


      var pathParams = {
        'process_id': processId,
        'flow_id': flowId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ResultSuccess;

      return this.apiClient.callApi(
        '/processes/{process_id}/flows/{flow_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGateway operation.
     * @callback module:api/ProcessmakerApi~deleteGatewayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method is deletes a single item using the gateway ID and process ID.
     * @param {String} processId Process ID
     * @param {String} gatewayId ID of Process to delete
     * @param {module:api/ProcessmakerApi~deleteGatewayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultSuccess}
     */
    this.deleteGateway = function(processId, gatewayId, callback) {
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling deleteGateway";
      }

      // verify the required parameter 'gatewayId' is set
      if (gatewayId == undefined || gatewayId == null) {
        throw "Missing the required parameter 'gatewayId' when calling deleteGateway";
      }


      var pathParams = {
        'process_id': processId,
        'gateway_id': gatewayId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ResultSuccess;

      return this.apiClient.callApi(
        '/processes/{process_id}/gateways/{gateway_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGroup operation.
     * @callback module:api/ProcessmakerApi~deleteGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method deletes a group using the group ID
     * @param {String} id ID of group to delete
     * @param {module:api/ProcessmakerApi~deleteGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultSuccess}
     */
    this.deleteGroup = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling deleteGroup";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ResultSuccess;

      return this.apiClient.callApi(
        '/groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInputOutput operation.
     * @callback module:api/ProcessmakerApi~deleteInputOutputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method deletes the Input/Output based on the Input/Output ID, process ID and task ID.
     * @param {String} processId Process ID related to the Input/Output object
     * @param {String} taskId Task instance ID related to Input/Output object
     * @param {String} inputoutputUid Input/Output ID to fetch
     * @param {module:api/ProcessmakerApi~deleteInputOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultSuccess}
     */
    this.deleteInputOutput = function(processId, taskId, inputoutputUid, callback) {
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling deleteInputOutput";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling deleteInputOutput";
      }

      // verify the required parameter 'inputoutputUid' is set
      if (inputoutputUid == undefined || inputoutputUid == null) {
        throw "Missing the required parameter 'inputoutputUid' when calling deleteInputOutput";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId,
        'inputoutput_uid': inputoutputUid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ResultSuccess;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}/inputoutput/{inputoutput_uid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInstance operation.
     * @callback module:api/ProcessmakerApi~deleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method deletes an instance using the instance ID and process ID.
     * @param {String} processId Process ID
     * @param {String} instanceId ID of instance to delete
     * @param {module:api/ProcessmakerApi~deleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultSuccess}
     */
    this.deleteInstance = function(processId, instanceId, callback) {
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling deleteInstance";
      }

      // verify the required parameter 'instanceId' is set
      if (instanceId == undefined || instanceId == null) {
        throw "Missing the required parameter 'instanceId' when calling deleteInstance";
      }


      var pathParams = {
        'process_id': processId,
        'instance_id': instanceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ResultSuccess;

      return this.apiClient.callApi(
        '/processes/{process_id}/instances/{instance_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProcess operation.
     * @callback module:api/ProcessmakerApi~deleteProcessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method deletes a process using the process ID.
     * @param {String} id Process ID to delete
     * @param {module:api/ProcessmakerApi~deleteProcessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultSuccess}
     */
    this.deleteProcess = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling deleteProcess";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ResultSuccess;

      return this.apiClient.callApi(
        '/processes/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTask operation.
     * @callback module:api/ProcessmakerApi~deleteTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method deletes a task using the task ID and process ID.
     * @param {String} processId Process ID
     * @param {String} taskId ID of task to delete
     * @param {module:api/ProcessmakerApi~deleteTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultSuccess}
     */
    this.deleteTask = function(processId, taskId, callback) {
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling deleteTask";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling deleteTask";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ResultSuccess;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTaskConnector operation.
     * @callback module:api/ProcessmakerApi~deleteTaskConnectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method is intended for deleting a single Task connector based on Task ID, Process ID and Connector ID.
     * @param {String} processId ID of Process item to fetch
     * @param {String} taskId ID of Task item to fetch
     * @param {String} connectorId ID of TaskConnector to fetch
     * @param {module:api/ProcessmakerApi~deleteTaskConnectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultSuccess}
     */
    this.deleteTaskConnector = function(processId, taskId, connectorId, callback) {
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling deleteTaskConnector";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling deleteTaskConnector";
      }

      // verify the required parameter 'connectorId' is set
      if (connectorId == undefined || connectorId == null) {
        throw "Missing the required parameter 'connectorId' when calling deleteTaskConnector";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId,
        'connector_id': connectorId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ResultSuccess;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}/connectors/{connector_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/ProcessmakerApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method deletes a user from the system.
     * @param {String} id ID of user to delete
     * @param {module:api/ProcessmakerApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultSuccess}
     */
    this.deleteUser = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling deleteUser";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ResultSuccess;

      return this.apiClient.callApi(
        '/users/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the eventTrigger operation.
     * @callback module:api/ProcessmakerApi~eventTriggerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataModelItem1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method starts/triggers an event.
     * @param {String} processId Process ID related to the event
     * @param {String} eventId ID of event to trigger
     * @param {module:model/TriggerEventCreateItem} triggerEventCreateItem Json with some parameters
     * @param {module:api/ProcessmakerApi~eventTriggerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataModelItem1}
     */
    this.eventTrigger = function(processId, eventId, triggerEventCreateItem, callback) {
      var postBody = triggerEventCreateItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling eventTrigger";
      }

      // verify the required parameter 'eventId' is set
      if (eventId == undefined || eventId == null) {
        throw "Missing the required parameter 'eventId' when calling eventTrigger";
      }

      // verify the required parameter 'triggerEventCreateItem' is set
      if (triggerEventCreateItem == undefined || triggerEventCreateItem == null) {
        throw "Missing the required parameter 'triggerEventCreateItem' when calling eventTrigger";
      }


      var pathParams = {
        'process_id': processId,
        'event_id': eventId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = DataModelItem1;

      return this.apiClient.callApi(
        '/processes/{process_id}/events/{event_id}/trigger', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findClientById operation.
     * @callback module:api/ProcessmakerApi~findClientByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method is retrieves an Oauth client based on its ID.
     * @param {String} userId ID of user to retrieve
     * @param {String} clientId ID of client to retrieve
     * @param {module:api/ProcessmakerApi~findClientByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientItem}
     */
    this.findClientById = function(userId, clientId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling findClientById";
      }

      // verify the required parameter 'clientId' is set
      if (clientId == undefined || clientId == null) {
        throw "Missing the required parameter 'clientId' when calling findClientById";
      }


      var pathParams = {
        'user_id': userId,
        'client_id': clientId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ClientItem;

      return this.apiClient.callApi(
        '/users/{user_id}/clients/{client_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findClients operation.
     * @callback module:api/ProcessmakerApi~findClientsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves all existing clients belonging to an user.
     * @param {String} userId User ID related to the clients
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pagefindProcessById Page numbers to fetch (default to 1)
     * @param {Number} opts.perPage Amount of items per page (default to 15)
     * @param {module:api/ProcessmakerApi~findClientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientCollection}
     */
    this.findClients = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling findClients";
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'pagefindProcessById': opts['pagefindProcessById'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ClientCollection;

      return this.apiClient.callApi(
        '/users/{user_id}/clients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findDataModel operation.
     * @callback module:api/ProcessmakerApi~findDataModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataModelItem1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns the instance DataModel and lets the user work with it directly
     * @param {String} processId ID of process to return
     * @param {String} instanceId ID of instance to return
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to fetch (default to 1)
     * @param {Number} opts.perPage Amount of items per Page (default to 15)
     * @param {module:api/ProcessmakerApi~findDataModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataModelItem1}
     */
    this.findDataModel = function(processId, instanceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling findDataModel";
      }

      // verify the required parameter 'instanceId' is set
      if (instanceId == undefined || instanceId == null) {
        throw "Missing the required parameter 'instanceId' when calling findDataModel";
      }


      var pathParams = {
        'process_id': processId,
        'instance_id': instanceId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = DataModelItem1;

      return this.apiClient.callApi(
        '/processes/{process_id}/instances/{instance_id}/datamodel', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findEventById operation.
     * @callback module:api/ProcessmakerApi~findEventByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves an event using its ID.
     * @param {String} processId ID of process to return
     * @param {String} eventId ID of event to return
     * @param {module:api/ProcessmakerApi~findEventByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventItem}
     */
    this.findEventById = function(processId, eventId, callback) {
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling findEventById";
      }

      // verify the required parameter 'eventId' is set
      if (eventId == undefined || eventId == null) {
        throw "Missing the required parameter 'eventId' when calling findEventById";
      }


      var pathParams = {
        'process_id': processId,
        'event_id': eventId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = EventItem;

      return this.apiClient.callApi(
        '/processes/{process_id}/events/{event_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findEventConnectorById operation.
     * @callback module:api/ProcessmakerApi~findEventConnectorByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventConnector1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns all Event connectors related to the run Process and Event.
     * @param {String} processId ID of Process to fetch
     * @param {String} eventId ID of Event to fetch
     * @param {String} connectorId ID of EventConnector to fetch
     * @param {module:api/ProcessmakerApi~findEventConnectorByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventConnector1}
     */
    this.findEventConnectorById = function(processId, eventId, connectorId, callback) {
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling findEventConnectorById";
      }

      // verify the required parameter 'eventId' is set
      if (eventId == undefined || eventId == null) {
        throw "Missing the required parameter 'eventId' when calling findEventConnectorById";
      }

      // verify the required parameter 'connectorId' is set
      if (connectorId == undefined || connectorId == null) {
        throw "Missing the required parameter 'connectorId' when calling findEventConnectorById";
      }


      var pathParams = {
        'process_id': processId,
        'event_id': eventId,
        'connector_id': connectorId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = EventConnector1;

      return this.apiClient.callApi(
        '/processes/{process_id}/events/{event_id}/connectors/{connector_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findEventConnectors operation.
     * @callback module:api/ProcessmakerApi~findEventConnectorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventConnectorsCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns all Event connectors related to the run Process and Event.
     * @param {String} processId ID of Process to fetch
     * @param {String} eventId ID of Task to fetch
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to fetch (default to 1)
     * @param {Number} opts.perPage Amount of items per Page (default to 15)
     * @param {module:api/ProcessmakerApi~findEventConnectorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventConnectorsCollection}
     */
    this.findEventConnectors = function(processId, eventId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling findEventConnectors";
      }

      // verify the required parameter 'eventId' is set
      if (eventId == undefined || eventId == null) {
        throw "Missing the required parameter 'eventId' when calling findEventConnectors";
      }


      var pathParams = {
        'process_id': processId,
        'event_id': eventId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = EventConnectorsCollection;

      return this.apiClient.callApi(
        '/processes/{process_id}/events/{event_id}/connectors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findEvents operation.
     * @callback module:api/ProcessmakerApi~findEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns all events related to the runned process
     * @param {String} processId ID of process related to the event
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page numbers to fetch (default to 1)
     * @param {Number} opts.perPage Amount of items per Page (default to 15)
     * @param {module:api/ProcessmakerApi~findEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventCollection}
     */
    this.findEvents = function(processId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling findEvents";
      }


      var pathParams = {
        'process_id': processId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = EventCollection;

      return this.apiClient.callApi(
        '/processes/{process_id}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findFlowById operation.
     * @callback module:api/ProcessmakerApi~findFlowByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlowItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves a flow based on its ID.
     * @param {String} processId ID of process to return
     * @param {String} flowId ID of flow to return
     * @param {module:api/ProcessmakerApi~findFlowByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlowItem}
     */
    this.findFlowById = function(processId, flowId, callback) {
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling findFlowById";
      }

      // verify the required parameter 'flowId' is set
      if (flowId == undefined || flowId == null) {
        throw "Missing the required parameter 'flowId' when calling findFlowById";
      }


      var pathParams = {
        'process_id': processId,
        'flow_id': flowId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = FlowItem;

      return this.apiClient.callApi(
        '/processes/{process_id}/flows/{flow_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findFlows operation.
     * @callback module:api/ProcessmakerApi~findFlowsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlowCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves all existing flows.
     * @param {String} processId ID of process related to the flow
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page numbers to fetch (default to 1)
     * @param {Number} opts.perPage Amount of items per Page (default to 15)
     * @param {module:api/ProcessmakerApi~findFlowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlowCollection}
     */
    this.findFlows = function(processId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling findFlows";
      }


      var pathParams = {
        'process_id': processId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = FlowCollection;

      return this.apiClient.callApi(
        '/processes/{process_id}/flows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findGatewayById operation.
     * @callback module:api/ProcessmakerApi~findGatewayByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GatewayItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves a gateway based on its ID.
     * @param {String} processId ID of process to return
     * @param {String} gatewayId ID of gateway to return
     * @param {module:api/ProcessmakerApi~findGatewayByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GatewayItem}
     */
    this.findGatewayById = function(processId, gatewayId, callback) {
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling findGatewayById";
      }

      // verify the required parameter 'gatewayId' is set
      if (gatewayId == undefined || gatewayId == null) {
        throw "Missing the required parameter 'gatewayId' when calling findGatewayById";
      }


      var pathParams = {
        'process_id': processId,
        'gateway_id': gatewayId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = GatewayItem;

      return this.apiClient.callApi(
        '/processes/{process_id}/gateways/{gateway_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findGateways operation.
     * @callback module:api/ProcessmakerApi~findGatewaysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GatewayCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves all existing gateways.
     * @param {String} processId ID of process related to the gateway
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to fetch (default to 1)
     * @param {Number} opts.perPage Amount of items per page (default to 15)
     * @param {module:api/ProcessmakerApi~findGatewaysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GatewayCollection}
     */
    this.findGateways = function(processId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling findGateways";
      }


      var pathParams = {
        'process_id': processId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = GatewayCollection;

      return this.apiClient.callApi(
        '/processes/{process_id}/gateways', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findGroupById operation.
     * @callback module:api/ProcessmakerApi~findGroupByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves a group using its ID.
     * @param {String} id ID of group to return
     * @param {module:api/ProcessmakerApi~findGroupByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupItem}
     */
    this.findGroupById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling findGroupById";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = GroupItem;

      return this.apiClient.callApi(
        '/groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findGroups operation.
     * @callback module:api/ProcessmakerApi~findGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves all existing groups.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to fetch (default to 1)
     * @param {Number} opts.perPage Amount of items per Page (default to 15)
     * @param {module:api/ProcessmakerApi~findGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupCollection}
     */
    this.findGroups = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = GroupCollection;

      return this.apiClient.callApi(
        '/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findInputOutputById operation.
     * @callback module:api/ProcessmakerApi~findInputOutputByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InputOutputItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves an Input/Output object using its ID.
     * @param {String} processId Process ID related to the Input/Output object
     * @param {String} taskId Task instance ID related to the Input/Output object
     * @param {String} inputoutputUid ID of Input/Output to return
     * @param {module:api/ProcessmakerApi~findInputOutputByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InputOutputItem}
     */
    this.findInputOutputById = function(processId, taskId, inputoutputUid, callback) {
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling findInputOutputById";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling findInputOutputById";
      }

      // verify the required parameter 'inputoutputUid' is set
      if (inputoutputUid == undefined || inputoutputUid == null) {
        throw "Missing the required parameter 'inputoutputUid' when calling findInputOutputById";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId,
        'inputoutput_uid': inputoutputUid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = InputOutputItem;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}/inputoutput/{inputoutput_uid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findInputOutputs operation.
     * @callback module:api/ProcessmakerApi~findInputOutputsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InputOutputCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves all existing Input/Output objects in the related task instance.
     * @param {String} processId Process ID related to Input/Output object
     * @param {String} taskId Task instance ID related to Input/Output object
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to fetch (default to 1)
     * @param {Number} opts.perPage Amount of items per page (default to 15)
     * @param {module:api/ProcessmakerApi~findInputOutputsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InputOutputCollection}
     */
    this.findInputOutputs = function(processId, taskId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling findInputOutputs";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling findInputOutputs";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = InputOutputCollection;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}/inputoutput', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findInstanceById operation.
     * @callback module:api/ProcessmakerApi~findInstanceByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves an instance using its ID.
     * @param {String} processId ID of process to return
     * @param {String} instanceId ID of instance to return
     * @param {module:api/ProcessmakerApi~findInstanceByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceItem}
     */
    this.findInstanceById = function(processId, instanceId, callback) {
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling findInstanceById";
      }

      // verify the required parameter 'instanceId' is set
      if (instanceId == undefined || instanceId == null) {
        throw "Missing the required parameter 'instanceId' when calling findInstanceById";
      }


      var pathParams = {
        'process_id': processId,
        'instance_id': instanceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = InstanceItem;

      return this.apiClient.callApi(
        '/processes/{process_id}/instances/{instance_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findInstances operation.
     * @callback module:api/ProcessmakerApi~findInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves related to the process using  the Process ID
     * @param {String} processId Process ID related to the instances
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to fetch (default to 1)
     * @param {Number} opts.perPage Amount of items per page (default to 15)
     * @param {module:api/ProcessmakerApi~findInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceCollection}
     */
    this.findInstances = function(processId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling findInstances";
      }


      var pathParams = {
        'process_id': processId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = InstanceCollection;

      return this.apiClient.callApi(
        '/processes/{process_id}/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findProcessById operation.
     * @callback module:api/ProcessmakerApi~findProcessByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves a process using its ID
     * @param {String} id ID of process to return
     * @param {module:api/ProcessmakerApi~findProcessByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessItem}
     */
    this.findProcessById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling findProcessById";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ProcessItem;

      return this.apiClient.callApi(
        '/processes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findProcesses operation.
     * @callback module:api/ProcessmakerApi~findProcessesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves all existing processes.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to fetch (default to 1)
     * @param {Number} opts.perPage Amount of items per page (default to 15)
     * @param {module:api/ProcessmakerApi~findProcessesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessCollection}
     */
    this.findProcesses = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ProcessCollection;

      return this.apiClient.callApi(
        '/processes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findTaskById operation.
     * @callback module:api/ProcessmakerApi~findTaskByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method is retrieves a task using its ID.
     * @param {String} processId ID of process to return
     * @param {String} taskId ID of task to return
     * @param {module:api/ProcessmakerApi~findTaskByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskItem}
     */
    this.findTaskById = function(processId, taskId, callback) {
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling findTaskById";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling findTaskById";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = TaskItem;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findTaskConnectorById operation.
     * @callback module:api/ProcessmakerApi~findTaskConnectorByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskConnector1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method is intended for retrieving an Task connector based on it&#39;s ID.
     * @param {String} processId ID of Process to fetch
     * @param {String} taskId ID of Task to fetch
     * @param {String} connectorId ID of TaskConnector to fetch
     * @param {module:api/ProcessmakerApi~findTaskConnectorByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskConnector1}
     */
    this.findTaskConnectorById = function(processId, taskId, connectorId, callback) {
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling findTaskConnectorById";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling findTaskConnectorById";
      }

      // verify the required parameter 'connectorId' is set
      if (connectorId == undefined || connectorId == null) {
        throw "Missing the required parameter 'connectorId' when calling findTaskConnectorById";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId,
        'connector_id': connectorId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = TaskConnector1;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}/connectors/{connector_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findTaskConnectors operation.
     * @callback module:api/ProcessmakerApi~findTaskConnectorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskConnectorsCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns all Task connectors related to the run Process and Task.
     * @param {String} processId ID of Process to fetch
     * @param {String} taskId ID of Task to fetch
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to fetch (default to 1)
     * @param {Number} opts.perPage Amount of items per Page (default to 15)
     * @param {module:api/ProcessmakerApi~findTaskConnectorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskConnectorsCollection}
     */
    this.findTaskConnectors = function(processId, taskId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling findTaskConnectors";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling findTaskConnectors";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = TaskConnectorsCollection;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}/connectors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findTaskInstanceById operation.
     * @callback module:api/ProcessmakerApi~findTaskInstanceByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves a task instance based on its ID.
     * @param {String} taskInstanceId ID of task instance to return
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to fetch (default to 1)
     * @param {Number} opts.perPage Amount of items per page (default to 15)
     * @param {module:api/ProcessmakerApi~findTaskInstanceByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.findTaskInstanceById = function(taskInstanceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'taskInstanceId' is set
      if (taskInstanceId == undefined || taskInstanceId == null) {
        throw "Missing the required parameter 'taskInstanceId' when calling findTaskInstanceById";
      }


      var pathParams = {
        'task_instance_id': taskInstanceId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/task_instances/{task_instance_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findTaskInstances operation.
     * @callback module:api/ProcessmakerApi~findTaskInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskInstanceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves all existing task instances
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to fetch (default to 1)
     * @param {Number} opts.perPage Amount of items per page (default to 15)
     * @param {module:api/ProcessmakerApi~findTaskInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskInstanceCollection}
     */
    this.findTaskInstances = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = TaskInstanceCollection;

      return this.apiClient.callApi(
        '/task_instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findTasks operation.
     * @callback module:api/ProcessmakerApi~findTasksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method is intended for returning a list of all Tasks related to the process
     * @param {String} processId ID of Process relative to task
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to fetch (default to 1)
     * @param {Number} opts.perPage Amount of items per Page (default to 15)
     * @param {module:api/ProcessmakerApi~findTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskCollection}
     */
    this.findTasks = function(processId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling findTasks";
      }


      var pathParams = {
        'process_id': processId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = TaskCollection;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findUserById operation.
     * @callback module:api/ProcessmakerApi~findUserByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns a user using its ID.
     * @param {String} id ID of the user to return
     * @param {module:api/ProcessmakerApi~findUserByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserItem}
     */
    this.findUserById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling findUserById";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = UserItem;

      return this.apiClient.callApi(
        '/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findUsers operation.
     * @callback module:api/ProcessmakerApi~findUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returs all existing users in the system.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to fetch (default to 1)
     * @param {Number} opts.perPage Amount of items per page (default to 15)
     * @param {module:api/ProcessmakerApi~findUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserCollection}
     */
    this.findUsers = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = UserCollection;

      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importBpmnFile operation.
     * @callback module:api/ProcessmakerApi~importBpmnFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessCollection1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method imports BPMN files. A new process is created when import is successful.
     * @param {module:model/BpmnImportItem} bpmnImportItem JSON API with the BPMN file to import
     * @param {module:api/ProcessmakerApi~importBpmnFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessCollection1}
     */
    this.importBpmnFile = function(bpmnImportItem, callback) {
      var postBody = bpmnImportItem;

      // verify the required parameter 'bpmnImportItem' is set
      if (bpmnImportItem == undefined || bpmnImportItem == null) {
        throw "Missing the required parameter 'bpmnImportItem' when calling importBpmnFile";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ProcessCollection1;

      return this.apiClient.callApi(
        '/processes/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the myselfUser operation.
     * @callback module:api/ProcessmakerApi~myselfUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns user information using a token
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to fetch (default to 1)
     * @param {Number} opts.perPage Amount of items per page (default to 15)
     * @param {module:api/ProcessmakerApi~myselfUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserItem}
     */
    this.myselfUser = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = UserItem;

      return this.apiClient.callApi(
        '/users/myself', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeGroupsFromTask operation.
     * @callback module:api/ProcessmakerApi~removeGroupsFromTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method removes groups from a task
     * @param {String} processId Process ID
     * @param {String} taskId Task ID
     * @param {module:model/TaskRemoveGroupsItem} taskRemoveGroupsItem JSON API response with Groups IDs to remove
     * @param {module:api/ProcessmakerApi~removeGroupsFromTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultSuccess}
     */
    this.removeGroupsFromTask = function(processId, taskId, taskRemoveGroupsItem, callback) {
      var postBody = taskRemoveGroupsItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling removeGroupsFromTask";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling removeGroupsFromTask";
      }

      // verify the required parameter 'taskRemoveGroupsItem' is set
      if (taskRemoveGroupsItem == undefined || taskRemoveGroupsItem == null) {
        throw "Missing the required parameter 'taskRemoveGroupsItem' when calling removeGroupsFromTask";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ResultSuccess;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}/groups', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeUsersFromGroup operation.
     * @callback module:api/ProcessmakerApi~removeUsersFromGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method removes one or more users from a group.
     * @param {String} id ID of group to be modified
     * @param {module:model/GroupRemoveUsersItem} groupRemoveUsersItem JSON API response with Users IDs to remove
     * @param {module:api/ProcessmakerApi~removeUsersFromGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultSuccess}
     */
    this.removeUsersFromGroup = function(id, groupRemoveUsersItem, callback) {
      var postBody = groupRemoveUsersItem;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling removeUsersFromGroup";
      }

      // verify the required parameter 'groupRemoveUsersItem' is set
      if (groupRemoveUsersItem == undefined || groupRemoveUsersItem == null) {
        throw "Missing the required parameter 'groupRemoveUsersItem' when calling removeUsersFromGroup";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ResultSuccess;

      return this.apiClient.callApi(
        '/groups/{id}/users', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the syncGroupsToTask operation.
     * @callback module:api/ProcessmakerApi~syncGroupsToTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method synchronizes a one or more groups with a task.
     * @param {String} processId Process ID
     * @param {String} taskId ID of task to modify
     * @param {module:model/TaskSyncGroupsItem} taskSyncGroupsItem JSON API response with groups IDs to sync
     * @param {module:api/ProcessmakerApi~syncGroupsToTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultSuccess}
     */
    this.syncGroupsToTask = function(processId, taskId, taskSyncGroupsItem, callback) {
      var postBody = taskSyncGroupsItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling syncGroupsToTask";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling syncGroupsToTask";
      }

      // verify the required parameter 'taskSyncGroupsItem' is set
      if (taskSyncGroupsItem == undefined || taskSyncGroupsItem == null) {
        throw "Missing the required parameter 'taskSyncGroupsItem' when calling syncGroupsToTask";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ResultSuccess;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the syncUsersToGroup operation.
     * @callback module:api/ProcessmakerApi~syncUsersToGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method synchronizes one or more users with a group.
     * @param {String} id ID of group to be modifieded
     * @param {module:model/GroupSyncUsersItem} groupSyncUsersItem JSON API with array of users IDs to sync
     * @param {module:api/ProcessmakerApi~syncUsersToGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultSuccess}
     */
    this.syncUsersToGroup = function(id, groupSyncUsersItem, callback) {
      var postBody = groupSyncUsersItem;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling syncUsersToGroup";
      }

      // verify the required parameter 'groupSyncUsersItem' is set
      if (groupSyncUsersItem == undefined || groupSyncUsersItem == null) {
        throw "Missing the required parameter 'groupSyncUsersItem' when calling syncUsersToGroup";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ResultSuccess;

      return this.apiClient.callApi(
        '/groups/{id}/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClient operation.
     * @callback module:api/ProcessmakerApi~updateClientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method updates an existing Oauth client.
     * @param {String} userId ID of user to retrieve
     * @param {String} clientId ID of client to retrieve
     * @param {module:model/ClientUpdateItem} clientUpdateItem Client object to edit
     * @param {module:api/ProcessmakerApi~updateClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientItem}
     */
    this.updateClient = function(userId, clientId, clientUpdateItem, callback) {
      var postBody = clientUpdateItem;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling updateClient";
      }

      // verify the required parameter 'clientId' is set
      if (clientId == undefined || clientId == null) {
        throw "Missing the required parameter 'clientId' when calling updateClient";
      }

      // verify the required parameter 'clientUpdateItem' is set
      if (clientUpdateItem == undefined || clientUpdateItem == null) {
        throw "Missing the required parameter 'clientUpdateItem' when calling updateClient";
      }


      var pathParams = {
        'user_id': userId,
        'client_id': clientId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ClientItem;

      return this.apiClient.callApi(
        '/users/{user_id}/clients/{client_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEvent operation.
     * @callback module:api/ProcessmakerApi~updateEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method updates an existing event
     * @param {String} processId ID of process to retrieve
     * @param {String} eventId ID of event to retrieve
     * @param {module:model/EventUpdateItem} eventUpdateItem Event object to edit
     * @param {module:api/ProcessmakerApi~updateEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventItem}
     */
    this.updateEvent = function(processId, eventId, eventUpdateItem, callback) {
      var postBody = eventUpdateItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling updateEvent";
      }

      // verify the required parameter 'eventId' is set
      if (eventId == undefined || eventId == null) {
        throw "Missing the required parameter 'eventId' when calling updateEvent";
      }

      // verify the required parameter 'eventUpdateItem' is set
      if (eventUpdateItem == undefined || eventUpdateItem == null) {
        throw "Missing the required parameter 'eventUpdateItem' when calling updateEvent";
      }


      var pathParams = {
        'process_id': processId,
        'event_id': eventId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = EventItem;

      return this.apiClient.callApi(
        '/processes/{process_id}/events/{event_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEventConnector operation.
     * @callback module:api/ProcessmakerApi~updateEventConnectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventConnector1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method lets update the existing Event connector with new parameters values
     * @param {String} processId ID of Process to fetch
     * @param {String} eventId ID of Event to fetch
     * @param {String} connectorId ID of Event Connector to fetch
     * @param {module:model/EventConnectorUpdateItem} eventConnectorUpdateItem EventConnector object to edit
     * @param {module:api/ProcessmakerApi~updateEventConnectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventConnector1}
     */
    this.updateEventConnector = function(processId, eventId, connectorId, eventConnectorUpdateItem, callback) {
      var postBody = eventConnectorUpdateItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling updateEventConnector";
      }

      // verify the required parameter 'eventId' is set
      if (eventId == undefined || eventId == null) {
        throw "Missing the required parameter 'eventId' when calling updateEventConnector";
      }

      // verify the required parameter 'connectorId' is set
      if (connectorId == undefined || connectorId == null) {
        throw "Missing the required parameter 'connectorId' when calling updateEventConnector";
      }

      // verify the required parameter 'eventConnectorUpdateItem' is set
      if (eventConnectorUpdateItem == undefined || eventConnectorUpdateItem == null) {
        throw "Missing the required parameter 'eventConnectorUpdateItem' when calling updateEventConnector";
      }


      var pathParams = {
        'process_id': processId,
        'event_id': eventId,
        'connector_id': connectorId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = EventConnector1;

      return this.apiClient.callApi(
        '/processes/{process_id}/events/{event_id}/connectors/{connector_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFlow operation.
     * @callback module:api/ProcessmakerApi~updateFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlowItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method updates an existing flow.
     * @param {String} processId ID of process to retrieve
     * @param {String} flowId ID of flow to retrieve
     * @param {module:model/FlowUpdateItem} flowUpdateItem Flow object to edit
     * @param {module:api/ProcessmakerApi~updateFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlowItem}
     */
    this.updateFlow = function(processId, flowId, flowUpdateItem, callback) {
      var postBody = flowUpdateItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling updateFlow";
      }

      // verify the required parameter 'flowId' is set
      if (flowId == undefined || flowId == null) {
        throw "Missing the required parameter 'flowId' when calling updateFlow";
      }

      // verify the required parameter 'flowUpdateItem' is set
      if (flowUpdateItem == undefined || flowUpdateItem == null) {
        throw "Missing the required parameter 'flowUpdateItem' when calling updateFlow";
      }


      var pathParams = {
        'process_id': processId,
        'flow_id': flowId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = FlowItem;

      return this.apiClient.callApi(
        '/processes/{process_id}/flows/{flow_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGateway operation.
     * @callback module:api/ProcessmakerApi~updateGatewayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GatewayItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method updates an existing gateway.
     * @param {String} processId ID of process to retrieve
     * @param {String} gatewayId ID of gateway to retrieve
     * @param {module:model/GatewayUpdateItem} gatewayUpdateItem Gateway object to edit
     * @param {module:api/ProcessmakerApi~updateGatewayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GatewayItem}
     */
    this.updateGateway = function(processId, gatewayId, gatewayUpdateItem, callback) {
      var postBody = gatewayUpdateItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling updateGateway";
      }

      // verify the required parameter 'gatewayId' is set
      if (gatewayId == undefined || gatewayId == null) {
        throw "Missing the required parameter 'gatewayId' when calling updateGateway";
      }

      // verify the required parameter 'gatewayUpdateItem' is set
      if (gatewayUpdateItem == undefined || gatewayUpdateItem == null) {
        throw "Missing the required parameter 'gatewayUpdateItem' when calling updateGateway";
      }


      var pathParams = {
        'process_id': processId,
        'gateway_id': gatewayId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = GatewayItem;

      return this.apiClient.callApi(
        '/processes/{process_id}/gateways/{gateway_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGroup operation.
     * @callback module:api/ProcessmakerApi~updateGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method updates an existing group.
     * @param {String} id ID of group to retrieve
     * @param {module:model/GroupUpdateItem} groupUpdateItem Group object to edit
     * @param {module:api/ProcessmakerApi~updateGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupItem}
     */
    this.updateGroup = function(id, groupUpdateItem, callback) {
      var postBody = groupUpdateItem;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling updateGroup";
      }

      // verify the required parameter 'groupUpdateItem' is set
      if (groupUpdateItem == undefined || groupUpdateItem == null) {
        throw "Missing the required parameter 'groupUpdateItem' when calling updateGroup";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = GroupItem;

      return this.apiClient.callApi(
        '/groups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInputOutput operation.
     * @callback module:api/ProcessmakerApi~updateInputOutputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InputOutputItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method updates an existing Input/Output object.
     * @param {String} processId Process ID related to the Input/Output object
     * @param {String} taskId Task instance ID related to the Input/Output object
     * @param {String} inputoutputUid ID of Input/Output to retrieve
     * @param {module:model/InputOutputUpdateItem} inputOutputUpdateItem Input/Output object to edit
     * @param {module:api/ProcessmakerApi~updateInputOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InputOutputItem}
     */
    this.updateInputOutput = function(processId, taskId, inputoutputUid, inputOutputUpdateItem, callback) {
      var postBody = inputOutputUpdateItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling updateInputOutput";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling updateInputOutput";
      }

      // verify the required parameter 'inputoutputUid' is set
      if (inputoutputUid == undefined || inputoutputUid == null) {
        throw "Missing the required parameter 'inputoutputUid' when calling updateInputOutput";
      }

      // verify the required parameter 'inputOutputUpdateItem' is set
      if (inputOutputUpdateItem == undefined || inputOutputUpdateItem == null) {
        throw "Missing the required parameter 'inputOutputUpdateItem' when calling updateInputOutput";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId,
        'inputoutput_uid': inputoutputUid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = InputOutputItem;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}/inputoutput/{inputoutput_uid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInstance operation.
     * @callback module:api/ProcessmakerApi~updateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method updates  an existing instance.
     * @param {String} processId ID of Process to retrieve
     * @param {String} instanceId ID of Instance to retrieve
     * @param {module:model/InstanceUpdateItem} instanceUpdateItem Instance object to edit
     * @param {module:api/ProcessmakerApi~updateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceItem}
     */
    this.updateInstance = function(processId, instanceId, instanceUpdateItem, callback) {
      var postBody = instanceUpdateItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling updateInstance";
      }

      // verify the required parameter 'instanceId' is set
      if (instanceId == undefined || instanceId == null) {
        throw "Missing the required parameter 'instanceId' when calling updateInstance";
      }

      // verify the required parameter 'instanceUpdateItem' is set
      if (instanceUpdateItem == undefined || instanceUpdateItem == null) {
        throw "Missing the required parameter 'instanceUpdateItem' when calling updateInstance";
      }


      var pathParams = {
        'process_id': processId,
        'instance_id': instanceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = InstanceItem;

      return this.apiClient.callApi(
        '/processes/{process_id}/instances/{instance_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProcess operation.
     * @callback module:api/ProcessmakerApi~updateProcessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method updates an existing process.
     * @param {String} id ID of process to retrieve
     * @param {module:model/ProcessUpdateItem} processUpdateItem Process object to edit
     * @param {module:api/ProcessmakerApi~updateProcessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessItem}
     */
    this.updateProcess = function(id, processUpdateItem, callback) {
      var postBody = processUpdateItem;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling updateProcess";
      }

      // verify the required parameter 'processUpdateItem' is set
      if (processUpdateItem == undefined || processUpdateItem == null) {
        throw "Missing the required parameter 'processUpdateItem' when calling updateProcess";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ProcessItem;

      return this.apiClient.callApi(
        '/processes/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTask operation.
     * @callback module:api/ProcessmakerApi~updateTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method is intended for updating an existing task.
     * @param {String} processId ID of Process to fetch
     * @param {String} taskId ID of Task to fetch
     * @param {module:model/TaskUpdateItem} taskUpdateItem Task object to edit
     * @param {module:api/ProcessmakerApi~updateTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskItem}
     */
    this.updateTask = function(processId, taskId, taskUpdateItem, callback) {
      var postBody = taskUpdateItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling updateTask";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling updateTask";
      }

      // verify the required parameter 'taskUpdateItem' is set
      if (taskUpdateItem == undefined || taskUpdateItem == null) {
        throw "Missing the required parameter 'taskUpdateItem' when calling updateTask";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = TaskItem;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTaskConnector operation.
     * @callback module:api/ProcessmakerApi~updateTaskConnectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskConnector1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method lets update the existing Task connector with new parameters values
     * @param {String} processId ID of Process to fetch
     * @param {String} taskId ID of Task to fetch
     * @param {String} connectorId ID of Task Connector to fetch
     * @param {module:model/TaskConnectorUpdateItem} taskConnectorUpdateItem TaskConnector object to edit
     * @param {module:api/ProcessmakerApi~updateTaskConnectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskConnector1}
     */
    this.updateTaskConnector = function(processId, taskId, connectorId, taskConnectorUpdateItem, callback) {
      var postBody = taskConnectorUpdateItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling updateTaskConnector";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling updateTaskConnector";
      }

      // verify the required parameter 'connectorId' is set
      if (connectorId == undefined || connectorId == null) {
        throw "Missing the required parameter 'connectorId' when calling updateTaskConnector";
      }

      // verify the required parameter 'taskConnectorUpdateItem' is set
      if (taskConnectorUpdateItem == undefined || taskConnectorUpdateItem == null) {
        throw "Missing the required parameter 'taskConnectorUpdateItem' when calling updateTaskConnector";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId,
        'connector_id': connectorId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = TaskConnector1;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}/connectors/{connector_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTaskInstance operation.
     * @callback module:api/ProcessmakerApi~updateTaskInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method updates an existing task instance.
     * @param {String} taskInstanceId ID of task instance to retrieve
     * @param {module:model/TaskInstanceUpdateItem} taskInstanceUpdateItem Task Instance object to update
     * @param {module:api/ProcessmakerApi~updateTaskInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.updateTaskInstance = function(taskInstanceId, taskInstanceUpdateItem, callback) {
      var postBody = taskInstanceUpdateItem;

      // verify the required parameter 'taskInstanceId' is set
      if (taskInstanceId == undefined || taskInstanceId == null) {
        throw "Missing the required parameter 'taskInstanceId' when calling updateTaskInstance";
      }

      // verify the required parameter 'taskInstanceUpdateItem' is set
      if (taskInstanceUpdateItem == undefined || taskInstanceUpdateItem == null) {
        throw "Missing the required parameter 'taskInstanceUpdateItem' when calling updateTaskInstance";
      }


      var pathParams = {
        'task_instance_id': taskInstanceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/task_instances/{task_instance_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback module:api/ProcessmakerApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method updates an existing user.
     * @param {String} id ID of user to retrieve
     * @param {module:model/UserUpdateItem} userUpdateItem User object for update
     * @param {module:api/ProcessmakerApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserItem}
     */
    this.updateUser = function(id, userUpdateItem, callback) {
      var postBody = userUpdateItem;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling updateUser";
      }

      // verify the required parameter 'userUpdateItem' is set
      if (userUpdateItem == undefined || userUpdateItem == null) {
        throw "Missing the required parameter 'userUpdateItem' when calling updateUser";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = UserItem;

      return this.apiClient.callApi(
        '/users/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
