/**
 * ProcessMaker API
 * This ProcessMaker Core API provide access to the new generation engine with BPMN 2.0 support. The current Alpha 1.0 version supports  the part of BPM system functionality like process import, process execution, task assignment
 *
 * OpenAPI spec version: 1.0.0
 * Contact: alpha-program@processmaker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ProcessMakerApi);
  }
}(this, function(expect, ProcessMakerApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ProcessMakerApi.TaskAttributes();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TaskAttributes', function() {
    it('should create an instance of TaskAttributes', function() {
      // uncomment below and update the code to test TaskAttributes
      //var instane = new ProcessMakerApi.TaskAttributes();
      //expect(instance).to.be.a(ProcessMakerApi.TaskAttributes);
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new ProcessMakerApi.TaskAttributes();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new ProcessMakerApi.TaskAttributes();
      //expect(instance).to.be();
    });

    it('should have the property processId (base name: "process_id")', function() {
      // uncomment below and update the code to test the property processId
      //var instane = new ProcessMakerApi.TaskAttributes();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new ProcessMakerApi.TaskAttributes();
      //expect(instance).to.be();
    });

    it('should have the property assignType (base name: "assign_type")', function() {
      // uncomment below and update the code to test the property assignType
      //var instane = new ProcessMakerApi.TaskAttributes();
      //expect(instance).to.be();
    });

    it('should have the property priorityVariable (base name: "priority_variable")', function() {
      // uncomment below and update the code to test the property priorityVariable
      //var instane = new ProcessMakerApi.TaskAttributes();
      //expect(instance).to.be();
    });

    it('should have the property assignVariable (base name: "assign_variable")', function() {
      // uncomment below and update the code to test the property assignVariable
      //var instane = new ProcessMakerApi.TaskAttributes();
      //expect(instance).to.be();
    });

    it('should have the property groupVariable (base name: "group_variable")', function() {
      // uncomment below and update the code to test the property groupVariable
      //var instane = new ProcessMakerApi.TaskAttributes();
      //expect(instance).to.be();
    });

    it('should have the property miInstanceVariable (base name: "mi_instance_variable")', function() {
      // uncomment below and update the code to test the property miInstanceVariable
      //var instane = new ProcessMakerApi.TaskAttributes();
      //expect(instance).to.be();
    });

    it('should have the property miCompleteVariable (base name: "mi_complete_variable")', function() {
      // uncomment below and update the code to test the property miCompleteVariable
      //var instane = new ProcessMakerApi.TaskAttributes();
      //expect(instance).to.be();
    });

    it('should have the property transferFly (base name: "transfer_fly")', function() {
      // uncomment below and update the code to test the property transferFly
      //var instane = new ProcessMakerApi.TaskAttributes();
      //expect(instance).to.be();
    });

    it('should have the property canUpload (base name: "can_upload")', function() {
      // uncomment below and update the code to test the property canUpload
      //var instane = new ProcessMakerApi.TaskAttributes();
      //expect(instance).to.be();
    });

    it('should have the property viewUpload (base name: "view_upload")', function() {
      // uncomment below and update the code to test the property viewUpload
      //var instane = new ProcessMakerApi.TaskAttributes();
      //expect(instance).to.be();
    });

    it('should have the property viewAdditionalDocumentation (base name: "view_additional_documentation")', function() {
      // uncomment below and update the code to test the property viewAdditionalDocumentation
      //var instane = new ProcessMakerApi.TaskAttributes();
      //expect(instance).to.be();
    });

    it('should have the property start (base name: "start")', function() {
      // uncomment below and update the code to test the property start
      //var instane = new ProcessMakerApi.TaskAttributes();
      //expect(instance).to.be();
    });

    it('should have the property sendLastEmail (base name: "send_last_email")', function() {
      // uncomment below and update the code to test the property sendLastEmail
      //var instane = new ProcessMakerApi.TaskAttributes();
      //expect(instance).to.be();
    });

    it('should have the property derivationScreenTpl (base name: "derivation_screen_tpl")', function() {
      // uncomment below and update the code to test the property derivationScreenTpl
      //var instane = new ProcessMakerApi.TaskAttributes();
      //expect(instance).to.be();
    });

    it('should have the property selfserviceTimeout (base name: "selfservice_timeout")', function() {
      // uncomment below and update the code to test the property selfserviceTimeout
      //var instane = new ProcessMakerApi.TaskAttributes();
      //expect(instance).to.be();
    });

    it('should have the property selfserviceTime (base name: "selfservice_time")', function() {
      // uncomment below and update the code to test the property selfserviceTime
      //var instane = new ProcessMakerApi.TaskAttributes();
      //expect(instance).to.be();
    });

    it('should have the property selfserviceTimeUnit (base name: "selfservice_time_unit")', function() {
      // uncomment below and update the code to test the property selfserviceTimeUnit
      //var instane = new ProcessMakerApi.TaskAttributes();
      //expect(instance).to.be();
    });

    it('should have the property selfserviceExecution (base name: "selfservice_execution")', function() {
      // uncomment below and update the code to test the property selfserviceExecution
      //var instane = new ProcessMakerApi.TaskAttributes();
      //expect(instance).to.be();
    });

    it('should have the property lastAssignedUserId (base name: "last_assigned_user_id")', function() {
      // uncomment below and update the code to test the property lastAssignedUserId
      //var instane = new ProcessMakerApi.TaskAttributes();
      //expect(instance).to.be();
    });

    it('should have the property script (base name: "script")', function() {
      // uncomment below and update the code to test the property script
      //var instane = new ProcessMakerApi.TaskAttributes();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instane = new ProcessMakerApi.TaskAttributes();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instane = new ProcessMakerApi.TaskAttributes();
      //expect(instance).to.be();
    });

  });

}));
