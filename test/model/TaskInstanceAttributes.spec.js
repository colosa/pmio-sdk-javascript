/**
 * ProcessMaker API
 * This ProcessMaker Core API provide access to the new generation engine with BPMN 2.0 support. The current Alpha 1.0 version supports  the part of BPM system functionality like process import, process execution, task assignment
 *
 * OpenAPI spec version: 1.0.0
 * Contact: alpha-program@processmaker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ProcessMakerApi);
  }
}(this, function(expect, ProcessMakerApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ProcessMakerApi.TaskInstanceAttributes();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TaskInstanceAttributes', function() {
    it('should create an instance of TaskInstanceAttributes', function() {
      // uncomment below and update the code to test TaskInstanceAttributes
      //var instane = new ProcessMakerApi.TaskInstanceAttributes();
      //expect(instance).to.be.a(ProcessMakerApi.TaskInstanceAttributes);
    });

    it('should have the property taskId (base name: "task_id")', function() {
      // uncomment below and update the code to test the property taskId
      //var instane = new ProcessMakerApi.TaskInstanceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property instanceId (base name: "instance_id")', function() {
      // uncomment below and update the code to test the property instanceId
      //var instane = new ProcessMakerApi.TaskInstanceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property groupId (base name: "group_id")', function() {
      // uncomment below and update the code to test the property groupId
      //var instane = new ProcessMakerApi.TaskInstanceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "user_id")', function() {
      // uncomment below and update the code to test the property userId
      //var instane = new ProcessMakerApi.TaskInstanceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instane = new ProcessMakerApi.TaskInstanceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property priority (base name: "priority")', function() {
      // uncomment below and update the code to test the property priority
      //var instane = new ProcessMakerApi.TaskInstanceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property delegateDate (base name: "delegate_date")', function() {
      // uncomment below and update the code to test the property delegateDate
      //var instane = new ProcessMakerApi.TaskInstanceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property startDate (base name: "start_date")', function() {
      // uncomment below and update the code to test the property startDate
      //var instane = new ProcessMakerApi.TaskInstanceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property finishDate (base name: "finish_date")', function() {
      // uncomment below and update the code to test the property finishDate
      //var instane = new ProcessMakerApi.TaskInstanceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property taskDueDate (base name: "task_due_date")', function() {
      // uncomment below and update the code to test the property taskDueDate
      //var instane = new ProcessMakerApi.TaskInstanceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property riskDate (base name: "risk_date")', function() {
      // uncomment below and update the code to test the property riskDate
      //var instane = new ProcessMakerApi.TaskInstanceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property duration (base name: "duration")', function() {
      // uncomment below and update the code to test the property duration
      //var instane = new ProcessMakerApi.TaskInstanceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property instanceOverduePercentage (base name: "instance_overdue_percentage")', function() {
      // uncomment below and update the code to test the property instanceOverduePercentage
      //var instane = new ProcessMakerApi.TaskInstanceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property data (base name: "data")', function() {
      // uncomment below and update the code to test the property data
      //var instane = new ProcessMakerApi.TaskInstanceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property content (base name: "content")', function() {
      // uncomment below and update the code to test the property content
      //var instane = new ProcessMakerApi.TaskInstanceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instane = new ProcessMakerApi.TaskInstanceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instane = new ProcessMakerApi.TaskInstanceAttributes();
      //expect(instance).to.be();
    });

  });

}));
